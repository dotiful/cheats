% pacman

# list the packages marked for upgrade with their download size
pacman -Quq | xargs expac -S -H M '%k\\t%n' | sort -sh

# fix python exists in filesystem
sudo pacman -S --overwrite "*" python-<package>

# Install a package(s) by name
sudo pacman -S <pkg_name>

# Remove a package(s) by name
sudo pacman -Rs <pkg_name_installed>

# Search for package(s)
sudo pacman -Ss <keyword>

# Upgrade Packages
sudo pacman -Syu <pkg_name>

# Clean up all local caches
sudo pacman -Sc

# Clean up all local caches
sudo pacman -Scc

# Remove dependencies that are no longer needed
sudo pacman -Qdtq | pacman -Rs -

# Remove packages no longer included in any repositories
sudo pacman -Qmq | pacman -Rs -

# Mark a package previously installed as a dependency as explicitly required
sudo pacman -D --asexplicit <pkg_name>

# Install package(s) as dependency / without marking as explicitly required
sudo pacman -S --asdeps <pkg_name>

# Only downloads the given package(s) without unpacking or installing them
sudo pacman -Sw <pkg_name>

# Show a log of actions taken by the software management
sudo less /var/log/pacman.log

# Show all or most information about a package
sudo pacman -Si <pkg_name>

# Display local package information
sudo pacman -Qi <pkg_name>

# Display files provided by local package
sudo pacman -Ql <pkg_name>

# Display files provided by a remote package
sudo pacman -Fl <pkg_name>

# Query the package which provides file
sudo pacman -Qo <file_name>

# Search all packages to find the one which holds the specified file
sudo pacman -F <file_name>

# Show the changelog of a package
sudo pacman -Qc <pkg_name>

# Lists packages which have an update available
sudo pacman -Qu

# Display a list of all packages in all installation sources that are handled by the packages management
sudo pacman -Sl

# Generates a list of installed packages
sudo pacman -Q

# List packages that are installed but are not available in any installation source (anymore)
sudo pacman -Qm

# Search locally installed package for names or descriptions
sudo pacman -Qs <keyword>

# List packages not required by any other package
sudo pacman -Qt

# List packages installed explicitly (not as dependencies)
sudo pacman -Qe

# List packages installed automatically (as dependencies)
sudo pacman -Qd

# Display packages which require X to be installed
sudo pacman -Sii <pkg_name>

# List all packages which are required for the given package
sudo pacman -Qi <pkg_name>

# Installation sources management
sudo $EDITOR /etc/pacman.conf

# Refresh the information about installation sources
sudo pacman -Sy

# Prints a list of all installation sources
less /etc/pacman.d/mirrorlist

# List all packages from a certain repo
paclist <repo>

# Show a listing of all lock rules
less /etc/pacman.conf

# Verify package(s)
sudo pacman -Qk

# Verify dependencies of the complete system. Use some magic to fix broken dependencies in a system for pacman dependency level
sudo pacman -Dk

# Use some magic to fix broken dependencies in a system for shared library level
findbrokenpkgs # from AUR

# Use some magic to fix broken dependencies in a system for shared library level
lddd # from devtools

# Query a package supplied on the command line rather than an entry in the package management database
sudo pacman -Qp <pkg_name>

# List the contents of a package file
sudo pacman -Qpl <pkg_name>

# Install local package file
sudo pacman -U <pkg_file>

# Add a local package to the local package cache mostly for debugging purposes
sudo cp <pkg_file> /var/cache/pacman/pkg/

# Extract a package
tar -xf <pkg_file>

# Install/Remove packages to satisfy build-dependencies. Uses information in the source package
makepkg -seoc # Please use this with [ABS](https://wiki.archlinux.org/index.php/Arch_Build_System)

# Download the corresponding source package(s) to the given package name(s)
makepkg -o # Please use this with [ABS](https://wiki.archlinux.org/index.php/Arch_Build_System)

# Build a package
makepkg -s

# Check for possible packaging issues
namcap

$ pkg_name_installed: sudo pacman -Qe
